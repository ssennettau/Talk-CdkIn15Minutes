Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc
  VpcPublicSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.192.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc
  VpcPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc
  VpcPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable
      SubnetId:
        Ref: VpcPublicSubnet1Subnet
  VpcPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGW
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable
    DependsOn:
      - VpcVPCGW
  VpcPublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet1
  VpcPublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIP
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet1
    DependsOn:
      - VpcPublicSubnet1DefaultRoute
      - VpcPublicSubnet1RouteTableAssociation
  VpcPublicSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.192.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc
  VpcPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc
  VpcPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable
      SubnetId:
        Ref: VpcPublicSubnet2Subnet
  VpcPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGW
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable
    DependsOn:
      - VpcVPCGW
  VpcPrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.192.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc
  VpcPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc
  VpcPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTable
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet
  VpcPrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTable
  VpcPrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.192.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc
  VpcPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc
  VpcPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTable
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet
  VpcPrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTable
  VpcIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Vpc
  VpcVPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VpcIGW
      VpcId:
        Ref: Vpc
  InstanceInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ec2AndVpcStack/Instance/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:22
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Instance
      VpcId:
        Ref: Vpc
  InstanceInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Instance
  InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceInstanceRole
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: InstanceInstanceProfile
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.micro
      KeyName: my-key-pair
      SecurityGroupIds:
        - Fn::GetAtt:
            - InstanceInstanceSecurityGroup
            - GroupId
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet
      Tags:
        - Key: Name
          Value: Ec2AndVpcStack/Instance
      UserData:
        Fn::Base64: "#!/bin/bash"
    DependsOn:
      - InstanceInstanceRole
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61x8664C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
